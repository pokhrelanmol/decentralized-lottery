/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "VRFCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ticketPrice",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughEtherEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__RaffleNotOpen",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currrentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpKeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEntered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmation",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getTicketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523480156200001257600080fd5b506040516200194238038062001942833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508161012081815250508360c081815250508467ffffffffffffffff1660e08167ffffffffffffffff16815250508063ffffffff166101008163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508261014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b600067ffffffffffffffff82169050919050565b620001b78162000198565b8114620001c357600080fd5b50565b600081519050620001d781620001ac565b92915050565b6000819050919050565b620001f281620001dd565b8114620001fe57600080fd5b50565b6000815190506200021281620001e7565b92915050565b6000819050919050565b6200022d8162000218565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001c6565b9550506040620002ea89828a0162000201565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200023c565b92505060a06200032389828a016200027d565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611573620003cf600039600081816107ab015261087c0152600081816103cf01526108540152600061067d0152600061065a01526000610639015260006105fd01526000818161030f015261036301526115736000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063ca6a9ef814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780636e04ff0d146101cf57806387bb7ae01461020d576100c2565b8063115cbaf5146100c75780631fe543e3146100f25780632cfcc5391461011b578063320229eb146101255780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c58565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610e16565b61030d565b005b6101236103cd565b005b34801561013157600080fd5b5061013a61053c565b6040516101479190610e81565b60405180910390f35b34801561015c57600080fd5b5061017760048036038101906101729190610ef7565b610546565b005b34801561018557600080fd5b5061018e610736565b60405161019b9190610f85565b60405180910390f35b3480156101b057600080fd5b506101b9610760565b6040516101c69190610fbf565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f1919061108f565b610769565b60405161020492919061117b565b60405180910390f35b34801561021957600080fd5b50610222610850565b60405161022f9190610e81565b60405180910390f35b34801561024457600080fd5b5061024d610878565b60405161025a9190610e81565b60405180910390f35b34801561026f57600080fd5b506102786108a0565b60405161028591906111c8565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b091906111e3565b6108a9565b6040516102c29190611231565b60405180910390f35b3480156102d757600080fd5b506102e06108f0565b6040516102ed9190610e81565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bf57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103b692919061124c565b60405180910390fd5b6103c982826108fc565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610427576040517fe36300ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043b5761043a610be1565b5b600160149054906101000a900460ff16600181111561045d5761045c610be1565b5b14610494576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f634f3211e3a4e43fee5a21ad9f87ca153b300fc78b1c557a2057dbe9c63bcb4760405160405180910390a2565b6000600254905090565b600061056060405180602001604052806000815250610769565b509050806105cf5747600080549050600160149054906101000a900460ff16600181111561059157610590610be1565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016105c693929190611275565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105f4576105f3610be1565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106be9594939291906112e8565b6020604051808303816000875af11580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107019190611350565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b60006060600080600181111561078257610781610be1565b5b600160149054906101000a900460ff1660018111156107a4576107a3610be1565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107d891906113ac565b119050600080600080549050119050600080471190508380156107f85750825b80156108015750815b801561080a5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006003905090565b60008082815481106108be576108bd6113e0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054905082600081518110610917576109166113e0565b5b6020026020010151610929919061143e565b905060008082815481106109405761093f6113e0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109d4576109d3610be1565b5b0217905550600067ffffffffffffffff8111156109f4576109f3610cd3565b5b604051908082528060200260200182016040528015610a225781602001602082028036833780820191505090505b5060009080519060200190610a38929190610b3a565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a66906114a0565b60006040518083038185875af1925050503d8060008114610aa3576040519150601f19603f3d011682016040523d82523d6000602084013e610aa8565b606091505b5050905080610af05781476040517f6f694a02000000000000000000000000000000000000000000000000000000008152600401610ae7929190611514565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bb3579160200282015b82811115610bb25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b5a565b5b509050610bc09190610bc4565b5090565b5b80821115610bdd576000816000905550600101610bc5565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c2157610c20610be1565b5b50565b6000819050610c3282610c10565b919050565b6000610c4282610c24565b9050919050565b610c5281610c37565b82525050565b6000602082019050610c6d6000830184610c49565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c9a81610c87565b8114610ca557600080fd5b50565b600081359050610cb781610c91565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d0b82610cc2565b810181811067ffffffffffffffff82111715610d2a57610d29610cd3565b5b80604052505050565b6000610d3d610c73565b9050610d498282610d02565b919050565b600067ffffffffffffffff821115610d6957610d68610cd3565b5b602082029050602081019050919050565b600080fd5b6000610d92610d8d84610d4e565b610d33565b90508083825260208201905060208402830185811115610db557610db4610d7a565b5b835b81811015610dde5780610dca8882610ca8565b845260208401935050602081019050610db7565b5050509392505050565b600082601f830112610dfd57610dfc610cbd565b5b8135610e0d848260208601610d7f565b91505092915050565b60008060408385031215610e2d57610e2c610c7d565b5b6000610e3b85828601610ca8565b925050602083013567ffffffffffffffff811115610e5c57610e5b610c82565b5b610e6885828601610de8565b9150509250929050565b610e7b81610c87565b82525050565b6000602082019050610e966000830184610e72565b92915050565b600080fd5b60008083601f840112610eb757610eb6610cbd565b5b8235905067ffffffffffffffff811115610ed457610ed3610e9c565b5b602083019150836001820283011115610ef057610eef610d7a565b5b9250929050565b60008060208385031215610f0e57610f0d610c7d565b5b600083013567ffffffffffffffff811115610f2c57610f2b610c82565b5b610f3885828601610ea1565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f6f82610f44565b9050919050565b610f7f81610f64565b82525050565b6000602082019050610f9a6000830184610f76565b92915050565b600063ffffffff82169050919050565b610fb981610fa0565b82525050565b6000602082019050610fd46000830184610fb0565b92915050565b600080fd5b600067ffffffffffffffff821115610ffa57610ff9610cd3565b5b61100382610cc2565b9050602081019050919050565b82818337600083830152505050565b600061103261102d84610fdf565b610d33565b90508281526020810184848401111561104e5761104d610fda565b5b611059848285611010565b509392505050565b600082601f83011261107657611075610cbd565b5b813561108684826020860161101f565b91505092915050565b6000602082840312156110a5576110a4610c7d565b5b600082013567ffffffffffffffff8111156110c3576110c2610c82565b5b6110cf84828501611061565b91505092915050565b60008115159050919050565b6110ed816110d8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561112d578082015181840152602081019050611112565b8381111561113c576000848401525b50505050565b600061114d826110f3565b61115781856110fe565b935061116781856020860161110f565b61117081610cc2565b840191505092915050565b600060408201905061119060008301856110e4565b81810360208301526111a28184611142565b90509392505050565b600061ffff82169050919050565b6111c2816111ab565b82525050565b60006020820190506111dd60008301846111b9565b92915050565b6000602082840312156111f9576111f8610c7d565b5b600061120784828501610ca8565b91505092915050565b600061121b82610f44565b9050919050565b61122b81611210565b82525050565b60006020820190506112466000830184611222565b92915050565b60006040820190506112616000830185610f76565b61126e6020830184610f76565b9392505050565b600060608201905061128a6000830186610e72565b6112976020830185610e72565b6112a46040830184610e72565b949350505050565b6000819050919050565b6112bf816112ac565b82525050565b600067ffffffffffffffff82169050919050565b6112e2816112c5565b82525050565b600060a0820190506112fd60008301886112b6565b61130a60208301876112d9565b61131760408301866111b9565b6113246060830185610fb0565b6113316080830184610fb0565b9695505050505050565b60008151905061134a81610c91565b92915050565b60006020828403121561136657611365610c7d565b5b60006113748482850161133b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113b782610c87565b91506113c283610c87565b9250828210156113d5576113d461137d565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061144982610c87565b915061145483610c87565b9250826114645761146361140f565b5b828206905092915050565b600081905092915050565b50565b600061148a60008361146f565b91506114958261147a565b600082019050919050565b60006114ab8261147d565b9150819050919050565b6000819050919050565b60006114da6114d56114d084610f44565b6114b5565b610f44565b9050919050565b60006114ec826114bf565b9050919050565b60006114fe826114e1565b9050919050565b61150e816114f3565b82525050565b60006040820190506115296000830185611505565b6115366020830184610e72565b939250505056fea2646970667358221220c160c31b3dc4cf3c80474d0c346561c258b309d0e3e32eb2886a5fd7886c393164736f6c634300080b0033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    VRFCoordinatorV2: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    interval: PromiseOrValue<BigNumberish>,
    ticketPrice: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      VRFCoordinatorV2,
      subscriptionId,
      gasLane,
      interval,
      ticketPrice,
      callbackGasLimit,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    VRFCoordinatorV2: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    interval: PromiseOrValue<BigNumberish>,
    ticketPrice: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      VRFCoordinatorV2,
      subscriptionId,
      gasLane,
      interval,
      ticketPrice,
      callbackGasLimit,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
